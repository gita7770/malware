import os
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"
import numpy as np
import tensorflow as tf
import matplotlib
matplotlib.use('Agg')  # Use Agg backend which doesn't require a display
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import accuracy_score, classification_report
from trainaug import load_data, tf_dataset  # Ensure you have this module available
from vit1 import ViT  # Ensure you have this module available

""" Hyperparameters """
hp = {}
hp["image_size"] = 200
hp["num_channels"] = 3
hp["patch_size"] = 25
hp["num_patches"] = (hp["image_size"]**2) // (hp["patch_size"]**2)
hp["flat_patches_shape"] = (hp["num_patches"], hp["patch_size"]*hp["patch_size"]*hp["num_channels"])

hp["batch_size"] = 32
hp["lr"] = 1e-4
hp["num_epochs"] = 500
hp["num_classes"] = 5
hp["class_names"] = ["adware", "addisplay", "benign", "trojan", "riskware"]
hp["num_layers"] = 6
hp["hidden_dim"] = 256
hp["mlp_dim"] = 1024
hp["num_heads"] = 6
hp["dropout_rate"] = 0.1
hp["l2_reg"] = 1e-4  # Regularization strengt

def fgsm_attack(model, images, labels, epsilon):
    images = tf.cast(images, tf.float32)
    with tf.GradientTape() as tape:
        tape.watch(images)
        predictions = model(images)
        loss = tf.keras.losses.categorical_crossentropy(labels, predictions)
    gradient = tape.gradient(loss, images)
    signed_grad = tf.sign(gradient)
    adversarial_images = images + epsilon * signed_grad
    adversarial_images = tf.clip_by_value(adversarial_images, 0, 1)  # Ensure the images are in [0, 1] range
    return adversarial_images

def pgd_attack(model, images, labels, epsilon, alpha, iterations):
    images = tf.cast(images, tf.float32)
    original_images = images

    for i in range(iterations):
        with tf.GradientTape() as tape:
            tape.watch(images)
            predictions = model(images)
            loss = tf.keras.losses.categorical_crossentropy(labels, predictions)
        gradient = tape.gradient(loss, images)
        signed_grad = tf.sign(gradient)
        images = images + alpha * signed_grad
        perturbations = tf.clip_by_value(images - original_images, -epsilon, epsilon)
        images = tf.clip_by_value(original_images + perturbations, 0, 1)  # Ensure the images are in [0, 1] range

    return images

if __name__ == "__main__":
    """ Seeding """
    np.random.seed(42)
    tf.random.set_seed(42)

    """ Paths """
    dataset_path = "/kaggle/input/shivaratridataset/shivaratri
    #dataset_path = "/kaggle/input/50kdataset/50K7770"
    model_path = os.path.join("files", "/kaggle/working/malware/files/model.keras")


    """ Dataset """
    train_x, valid_x, test_x = load_data(dataset_path, val_split=0.2, test_split=0.1)


    test_ds = tf_dataset(test_x, batch=hp["batch_size"])

    """ Model """
    model = ViT(hp)
    model.load_weights(model_path)
    model.compile(
        loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),
        optimizer=tf.keras.optimizers.Adam(hp["lr"]),
        metrics=["acc"]
    )

    # Evaluate the model on clean data
    print("Evaluating on clean data...")
    clean_loss, clean_acc = model.evaluate(test_ds)
    print(f"Clean data - Loss: {clean_loss}, Accuracy: {clean_acc}")

    # Generate predictions and true labels
    y_true = []
    y_pred = []

    for images, labels in test_ds:
        preds = model.predict(images)
        y_true.extend(np.argmax(labels, axis=1))
        y_pred.extend(np.argmax(preds, axis=1))

    # Calculate the confusion matrix
    cm_clean = confusion_matrix(y_true, y_pred)
    print(cm_clean)

    # Plot the confusion matrix for clean data
    plt.figure(figsize=(8, 6))
    disp_clean = ConfusionMatrixDisplay(confusion_matrix=cm_clean, display_labels=hp["class_names"])
    disp_clean.plot(cmap=plt.cm.viridis)
    plt.title("Confusion Matrix - Clean Data")
    plt.show()

    # Epsilon values to test
    epsilon_values = [0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5]

    fgsm_accuracies = []
    pgd_accuracies = []

    alpha = 0.01
    iterations = 40

    for epsilon in epsilon_values:
        # FGSM Attack Evaluation
        print(f"Evaluating under FGSM attack with epsilon={epsilon}...")
        fgsm_acc = tf.metrics.CategoricalAccuracy()

        for images, labels in test_ds:
            adv_images = fgsm_attack(model, images, labels, epsilon)
            predictions = model(adv_images)
            fgsm_acc.update_state(labels, predictions)
        
        fgsm_accuracy = fgsm_acc.result().numpy()
        fgsm_accuracies.append(fgsm_accuracy)
        print(f"FGSM attack - Accuracy: {fgsm_accuracy}")

        # PGD Attack Evaluation
        print(f"Evaluating under PGD attack with epsilon={epsilon}...")
        pgd_acc = tf.metrics.CategoricalAccuracy()

        for images, labels in test_ds:
            adv_images = pgd_attack(model, images, labels, epsilon, alpha, iterations)
            predictions = model(adv_images)
            pgd_acc.update_state(labels, predictions)
        
        pgd_accuracy = pgd_acc.result().numpy()
        pgd_accuracies.append(pgd_accuracy)
        print(f"PGD attack - Accuracy: {pgd_accuracy}")

    # Plotting epsilon vs accuracy
   # Plotting epsilon vs accuracy
plt.figure(figsize=(10, 6))
plt.plot(epsilon_values, fgsm_accuracies, marker='o', label='FGSM Attack Accuracy')
plt.plot(epsilon_values, pgd_accuracies, marker='o', label='PGD Attack Accuracy')
plt.xlabel('Epsilon')
plt.ylabel('Accuracy')
plt.title('Epsilon vs Accuracy')
plt.legend()
plt.grid(True)
plt.savefig('epsilon_vs_accuracy.png')  # Save the figure instead of showing it
plt.close()  # Close the figure to release memory

