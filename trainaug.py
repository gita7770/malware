import os
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

import numpy as np
import cv2
from glob import glob
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from patchify import patchify
import tensorflow as tf
import tensorflow_probability as tfp
from tensorflow.keras.callbacks import ModelCheckpoint, CSVLogger, ReduceLROnPlateau, EarlyStopping
from vit1 import ViT  # Ensure your ViT class uses kernel_regularizer based on hp["l2_reg"]

""" Hyperparameters """
hp = {}
hp["image_size"] = 200
hp["num_channels"] = 3
hp["patch_size"] = 25
hp["num_patches"] = (hp["image_size"]**2) // (hp["patch_size"]**2)
hp["flat_patches_shape"] = (hp["num_patches"], hp["patch_size"]*hp["patch_size"]*hp["num_channels"])

hp["batch_size"] = 32
hp["lr"] = 1e-4
hp["num_epochs"] = 150
hp["num_classes"] = 5
hp["class_names"] = ["adware", "addisplay", "benign", "trojan", "riskware"]

hp["num_layers"] = 8
hp["hidden_dim"] = 512
hp["mlp_dim"] = 2048
hp["num_heads"] = 8
hp["dropout_rate"] = 0.1
hp["l2_reg"] = 1e-4  # Regularization strength

def create_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)

def load_data(path, val_split=0.2, test_split=0.1):
    images = shuffle(glob(os.path.join(path, "*", "*.png")))

    val_size = int(len(images) * val_split)
    test_size = int(len(images) * test_split)

    train_x, temp_x = train_test_split(images, test_size=(val_size + test_size), random_state=42)
    valid_x, test_x = train_test_split(temp_x, test_size=test_size, random_state=42)

    return train_x, valid_x, test_x

# Define RandAugment
data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip("horizontal"),
    tf.keras.layers.RandomRotation(0.1),
    tf.keras.layers.RandomContrast(0.2),
])

def process_image_label(path):
    path = path.decode()
    image = cv2.imread(path, cv2.IMREAD_COLOR)
    image = cv2.resize(image, (hp["image_size"], hp["image_size"]))
    image = image / 255.0

    # Apply RandAugment
    image = tf.convert_to_tensor(image, dtype=tf.float32)
    image = data_augmentation(image)

    patch_shape = (hp["patch_size"], hp["patch_size"], hp["num_channels"])
    patches = patchify(image.numpy(), patch_shape, hp["patch_size"])
    patches = np.reshape(patches, hp["flat_patches_shape"])
    patches = patches.astype(np.float32)

    class_name = path.split("/")[-2]
    class_idx = hp["class_names"].index(class_name)
    class_idx = np.array(class_idx, dtype=np.int32)
    return patches, class_idx

def parse(path):
    patches, labels = tf.numpy_function(process_image_label, [path], [tf.float32, tf.int32])
    labels = tf.one_hot(labels, hp["num_classes"])
    patches.set_shape(hp["flat_patches_shape"])
    labels.set_shape(hp["num_classes"])
    return patches, labels

# Define MixUp function
def mixup(images, labels, alpha=0.2):
    """ Applies MixUp augmentation to a batch of images and labels. """
    batch_size = tf.shape(images)[0]
    lambda_val = tfp.distributions.Beta(alpha, alpha).sample([batch_size, 1])

    indices = tf.random.shuffle(tf.range(batch_size))
    mixed_images = lambda_val * images + (1 - lambda_val) * tf.gather(images, indices)
    mixed_labels = lambda_val * labels + (1 - lambda_val) * tf.gather(labels, indices)

    return mixed_images, mixed_labels

def apply_mixup(image, label):
    """ Wrapper function for map function """
    return tf.numpy_function(mixup, [image, label], [tf.float32, tf.float32])

def tf_dataset(images, batch=32, mixup_enabled=True):
    ds = tf.data.Dataset.from_tensor_slices((images))
    ds = ds.map(parse).batch(batch).prefetch(8)
    
    if mixup_enabled:
        ds = ds.map(apply_mixup)  # Apply MixUp
    
    return ds

if __name__ == "__main__":
    np.random.seed(42)
    tf.random.set_seed(42)

    create_dir("files")
    dataset_path = "/kaggle/input/50kdataset/50K7770"
    model_path = os.path.join("files", "model.keras")
    csv_path = os.path.join("files", "log.csv")

    train_x, valid_x, test_x = load_data(dataset_path, val_split=0.2, test_split=0.1)
    print(f"Train: {len(train_x)} - Valid: {len(valid_x)} - Test: {len(test_x)}")

    train_ds = tf_dataset(train_x, batch=hp["batch_size"], mixup_enabled=True)  # Enable MixUp
    valid_ds = tf_dataset(valid_x, batch=hp["batch_size"], mixup_enabled=False)  # No MixUp for validation

    model = ViT(hp)
    model.compile(
        loss="categorical_crossentropy",
        optimizer=tf.keras.optimizers.Adam(hp["lr"], clipvalue=1.0),
        metrics=["acc"]
    )

    callbacks = [
        ModelCheckpoint(model_path, monitor='val_loss', verbose=1, save_best_only=True),
        ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=10, min_lr=1e-10, verbose=1),
        CSVLogger(csv_path),
        EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=False),
    ]

    model.fit(
        train_ds,
        epochs=hp["num_epochs"],
        validation_data=valid_ds,
        callbacks=callbacks
    )
