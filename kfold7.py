import os
import numpy as np
import cv2
from glob import glob
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split, KFold
from patchify import patchify
import tensorflow as tf
from tensorflow.keras.callbacks import ModelCheckpoint, CSVLogger, ReduceLROnPlateau, EarlyStopping
from vit import ViT
from google.colab import drive

""" Hyperparameters """
hp = {
    "image_size": 200,
    "num_channels": 3,
    "patch_size": 25,
    "num_patches": (200**2) // (25**2),
    "flat_patches_shape": (64, 25*25*3),
    "batch_size": 32,
    "lr": 1e-4,
    "num_epochs": 2,
    "num_classes": 5,
    "class_names": ["adware", "addisplay", "benign", "trojan", "riskware"],
    "num_layers": 12,
    "hidden_dim": 768,
    "mlp_dim": 3072,
    "num_heads": 12,
    "dropout_rate": 0.1
}

def create_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)

def load_data(path):
    images = shuffle(glob(os.path.join(path, "*", "*.png")))
    return images

def process_image_label(path):
    """ Reading images """
    path = path.decode()
    image = cv2.imread(path, cv2.IMREAD_COLOR)
    image = cv2.resize(image, (hp["image_size"], hp["image_size"]))
    image = image / 255.0

    """ Preprocessing to patches """
    patch_shape = (hp["patch_size"], hp["patch_size"], hp["num_channels"])
    patches = patchify(image, patch_shape, hp["patch_size"])
    patches = np.reshape(patches, hp["flat_patches_shape"])
    patches = patches.astype(np.float32)

    """ Label """
    class_name = path.split("/")[-2]
    class_idx = hp["class_names"].index(class_name)
    class_idx = np.array(class_idx, dtype=np.int32)

    return patches, class_idx

def parse(path):
    patches, labels = tf.numpy_function(process_image_label, [path], [tf.float32, tf.int32])
    labels = tf.one_hot(labels, hp["num_classes"])

    patches.set_shape(hp["flat_patches_shape"])
    labels.set_shape(hp["num_classes"])

    return patches, labels

def tf_dataset(images, batch=32):
    ds = tf.data.Dataset.from_tensor_slices((images))
    ds = ds.map(parse).batch(batch).prefetch(tf.data.experimental.AUTOTUNE)
    return ds

if __name__ == "__main__":
    """ Mount Google Drive """
    drive.mount('/content/drive')

    """ Seeding """
    np.random.seed(42)
    tf.random.set_seed(42)

    """ Directory for storing files """
    model_dir = "/content/drive/MyDrive/Models"
    create_dir(model_dir)
    model_path_template = os.path.join(model_dir, "model_fold_{fold_no}.keras")
    csv_path = os.path.join(model_dir, "log.csv")

    """ Dataset """
    images = load_data("/content/train")
    print(f"Total images: {len(images)}")

    kfold = KFold(n_splits=5, shuffle=True, random_state=42)

    fold_no = 1
    for train_idx, val_idx in kfold.split(images):
        train_x = np.array(images)[train_idx]
        valid_x = np.array(images)[val_idx]

        print(f"Fold {fold_no} - Train: {len(train_x)} - Valid: {len(valid_x)}")

        train_ds = tf_dataset(train_x, batch=hp["batch_size"])
        valid_ds = tf_dataset(valid_x, batch=hp["batch_size"])

        """ Model """
        model = ViT(hp)
        model.compile(
            loss="categorical_crossentropy",
            optimizer=tf.keras.optimizers.Adam(hp["lr"], clipvalue=1.0),
            metrics=["acc"]
        )

        # Load previous checkpoint if it exists
        model_path = model_path_template.format(fold_no=fold_no)
        if os.path.exists(model_path):
            model.load_weights(model_path)
            print(f"Loaded model from {model_path}")

        callbacks = [
            ModelCheckpoint(model_path, monitor='val_loss', verbose=1, save_best_only=True),
            ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=10, min_lr=1e-10, verbose=1),
            CSVLogger(csv_path),
            EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=False),
        ]

        model.fit(
            train_ds,
            epochs=hp["num_epochs"],
            validation_data=valid_ds,
            callbacks=callbacks
        )

        fold_no += 1
