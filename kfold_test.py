import os
import numpy as np
import cv2
from glob import glob
from patchify import patchify
from sklearn.utils import shuffle
import tensorflow as tf
from train import load_data, tf_dataset
from vit import ViT

""" Hyperparameters """
hp = {
    "image_size": 200,
    "num_channels": 3,
    "patch_size": 25,
    "num_patches": (200**2) // (25**2),
    "flat_patches_shape": (64, 25*25*3),
    "batch_size": 32,
    "lr": 1e-4,
    "num_classes": 5,
    "class_names": ["adware", "addisplay", "benign", "trojan", "riskware"],
    "num_layers": 12,
    "hidden_dim": 768,
    "mlp_dim": 3072,
    "num_heads": 12,
    "dropout_rate": 0.1
}

def create_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)

def load_data(path):
    images = shuffle(glob(os.path.join(path, "*", "*.png")))
    return images

def process_image_label(path):
    """ Reading images """
    path = path.decode()
    image = cv2.imread(path, cv2.IMREAD_COLOR)
    image = cv2.resize(image, (hp["image_size"], hp["image_size"]))
    image = image / 255.0

    """ Preprocessing to patches """
    patch_shape = (hp["patch_size"], hp["patch_size"], hp["num_channels"])
    patches = patchify(image, patch_shape, hp["patch_size"])
    patches = np.reshape(patches, hp["flat_patches_shape"])
    patches = patches.astype(np.float32)

    """ Label """
    class_name = path.split("/")[-2]
    class_idx = hp["class_names"].index(class_name)
    class_idx = np.array(class_idx, dtype=np.int32)

    return patches, class_idx

def parse(path):
    patches, labels = tf.numpy_function(process_image_label, [path], [tf.float32, tf.int32])
    labels = tf.one_hot(labels, hp["num_classes"])

    patches.set_shape(hp["flat_patches_shape"])
    labels.set_shape(hp["num_classes"])

    return patches, labels

def tf_dataset(images, batch=32):
    ds = tf.data.Dataset.from_tensor_slices((images))
    ds = ds.map(parse).batch(batch).prefetch(tf.data.experimental.AUTOTUNE)
    return ds
if __name__ == "__main__":
    """ Seeding """
    np.random.seed(42)
    tf.random.set_seed(42)

    """ Paths """
   # dataset_path = "model_fold_1"
    test_dataset_path = "/content/Gitufinaldataset/test"  # Path to test dataset
    model_path_template = os.path.join("files", "model_fold_1.keras")

    """ Load test images """
    test_images = load_data(test_dataset_path)
    print(f"Total test images: {len(test_images)}")

   # test_ds = create_test_dataset(test_images, batch_size=hp["batch_size"])
   # model_path = os.path.join("files", "model_fold_1.keras")

    """ Dataset """
    #train_x, valid_x, test_x = load_data(dataset_path)
    test_x = load_data(test_dataset_path)
    print(f" Test: {len(test_x)}")

    test_ds = tf_dataset(test_x, batch=hp["batch_size"])

    """ Evaluate models on each fold """
    for fold_no in range(1, 6):
        print(f"Evaluating fold {fold_no}")
        model_path = model_path_template.format(fold_no=fold_no)

        """ Load and compile model """
        model = ViT(hp)
        model.load_weights(model_path)
        model.compile(
            loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),
            optimizer=tf.keras.optimizers.Adam(hp["lr"]),
            metrics=["accuracy"]
        )

        """ Evaluate model """
        test_loss, test_acc = model.evaluate(test_ds)
        print(f"Fold {fold_no} - Test Loss: {test_loss} - Test Accuracy: {test_acc}")
