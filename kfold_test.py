import os
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"
import numpy as np
import cv2
from patchify import patchify
import tensorflow as tf
from train import load_data, tf_dataset
from vit import ViT

""" Hyperparameters """
hp = {
    "image_size": 200,
    "num_channels": 3,
    "patch_size": 25,
    "num_patches": (200**2) // (25**2),
    "flat_patches_shape": (64, 25*25*3),
    "batch_size": 16,
    "lr": 1e-4,
    "num_classes": 5,
    "class_names": ["adware", "addisplay", "benign", "trojan", "riskware"],
    "num_layers": 12,
    "hidden_dim": 768,
    "mlp_dim": 3072,
    "num_heads": 12,
    "dropout_rate": 0.1
}

if __name__ == "__main__":
    """ Seeding """
    np.random.seed(42)
    tf.random.set_seed(42)

    """ Paths """
    dataset_path = "/content/test"  # Path to test dataset
    model_path_template = os.path.join("files", "model_fold_{fold_no}.keras")

    """ Dataset """
    test_images = load_data(dataset_path)
    print(f"Total test images: {len(test_images)}")

    test_ds = tf_dataset(test_images, batch=hp["batch_size"])

    """ Evaluate on each fold """
    for fold_no in range(1, 6):
        print(f"Evaluating fold {fold_no}")
        model_path = model_path_template.format(fold_no=fold_no)

        """ Model """
        model = ViT(hp)
        model.load_weights(model_path)
        model.compile(
            loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),
            optimizer=tf.keras.optimizers.Adam(hp["lr"]),
            metrics=["acc"]
        )

        test_loss, test_acc = model.evaluate(test_ds)
        print(f"Fold {fold_no} - Test Loss: {test_loss} - Test Accuracy: {test_acc}")
