import os
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"
import numpy as np
import cv2
from patchify import patchify
import tensorflow as tf
from train import load_data, tf_dataset
from vit import ViT

# Hyperparameters
hp = {
    "image_size": 200,
    "num_channels": 3,
    "patch_size": 25,
    "num_patches": (200 ** 2) // (25 ** 2),
    "flat_patches_shape": ((200 ** 2) // (25 ** 2), 25 * 25 * 3),
    "batch_size": 16,
    "lr": 1e-4,
    "num_epochs": 500,
    "num_classes": 3,
    "class_names": ["spy", "adsware", "addisplay"],
    "num_layers": 12,
    "hidden_dim": 768,
    "mlp_dim": 3072,
    "num_heads": 12,
    "dropout_rate": 0.1
}

def preprocess_image(image_path, hp):
    """ Preprocess the image to match the model input requirements """
    image = cv2.imread(image_path)
    image = cv2.resize(image, (hp["image_size"], hp["image_size"]))
    image = image.astype(np.float32) / 255.0  # Normalize to [0, 1] range

    # Patchify the image
    patches = patchify(image, (hp["patch_size"], hp["patch_size"], hp["num_channels"]), step=hp["patch_size"])
    patches = patches.reshape(-1, hp["patch_size"] * hp["patch_size"] * hp["num_channels"])
    patches = np.expand_dims(patches, axis=0)  # Add batch dimension

    return patches

if __name__ == "__main__":
    # Seeding
    np.random.seed(42)
    tf.random.set_seed(42)

    # Paths
    #dataset_path = "/content/drive/MyDrive/malnet"
    model_path = os.path.join("files", "/content/drive/MyDrive/model.h5")
    image_path = "/content/malnet-images-tiny/test/addisplay/adflex/F5643227B65E7EC1C3042FDFB54D8C6225A3C37CC7D729F91AED447B202DBC38.png"  # Replace with your image path

    
    # Model
    model = ViT(hp)
    model.load_weights(model_path)
    model.compile(
        loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),
        optimizer=tf.keras.optimizers.Adam(hp["lr"]),
        metrics=["acc"]
    )

    # Classify a new image
    processed_image = preprocess_image(image_path, hp)
    prediction = model.predict(processed_image)
    predicted_class_index = np.argmax(prediction, axis=1)[0]
    predicted_class_name = hp["class_names"][predicted_class_index]

    print(f"Predicted class: {predicted_class_name}")
