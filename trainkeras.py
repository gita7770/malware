import os
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

import numpy as np
import cv2
from glob import glob
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from patchify import patchify
import tensorflow as tf
from tensorflow.keras.callbacks import ModelCheckpoint, CSVLogger, ReduceLROnPlateau, EarlyStopping
from vit1 import ViT

""" Hyperparameters """
hp = {}
hp["image_size"] = 200
hp["num_channels"] = 3
hp["patch_size"] = 25
hp["num_patches"] = (hp["image_size"] ** 2) // (hp["patch_size"] ** 2)
hp["flat_patches_shape"] = (hp["num_patches"], hp["patch_size"] * hp["patch_size"] * hp["num_channels"])

hp["batch_size"] = 32
hp["lr"] = 1e-4
hp["num_epochs"] = 100
hp["num_classes"] = 5
hp["class_names"] = ["adware", "addisplay", "benign", "trojan", "riskware"]

hp["num_layers"] = 8        # Reduced number of layers
hp["hidden_dim"] = 512      # Reduced hidden dimension
hp["mlp_dim"] = 2048
hp["num_heads"] = 8         # Reduced number of attention heads
hp["dropout_rate"] = 0.1    # Increased dropout rate

def create_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)

def load_data(path, val_split=0.2, test_split=0.1):
    images = shuffle(glob(os.path.join(path, "*", "*.png")))
    
    val_size = int(len(images) * val_split)
    test_size = int(len(images) * test_split)
    
    train_x, temp_x = train_test_split(images, test_size=(val_size + test_size), random_state=42)
    valid_x, test_x = train_test_split(temp_x, test_size=test_size, random_state=42)
    
    return train_x, valid_x, test_x

def augment_image(image):
    """Perform data augmentation using TensorFlow operations."""
    image = tf.image.random_flip_left_right(image)
    image = tf.image.random_brightness(image, max_delta=0.1)
    image = tf.image.random_contrast(image, lower=0.9, upper=1.1)
    return image

def process_image_label(path):
    """Read the image, perform augmentation, convert to patches, and generate the label."""
    # Decode path from bytes to string
    path = path.decode("utf-8")
    
    # Read and resize image using OpenCV
    image = cv2.imread(path, cv2.IMREAD_COLOR)
    if image is None:
        raise ValueError(f"Image not found: {path}")
    image = cv2.resize(image, (hp["image_size"], hp["image_size"]))
    image = image / 255.0  # Normalize to [0, 1]
    
    # Data augmentation (this returns a tf.Tensor)
    image = augment_image(image)
    
    # Convert the augmented image to a numpy array if needed
    if isinstance(image, tf.Tensor):
        image = image.numpy()
    
    # Convert the image into patches
    patch_shape = (hp["patch_size"], hp["patch_size"], hp["num_channels"])
    patches = patchify(image, patch_shape, hp["patch_size"])
    patches = np.reshape(patches, hp["flat_patches_shape"])
    patches = patches.astype(np.float32)
    
    # Extract label from the directory name
    class_name = path.split("/")[-2]
    class_idx = hp["class_names"].index(class_name)
    class_idx = np.array(class_idx, dtype=np.int32)
    
    return patches, class_idx

def parse(path):
    """Wrap the processing function for TensorFlow dataset."""
    patches, labels = tf.numpy_function(process_image_label, [path], [tf.float32, tf.int32])
    labels = tf.one_hot(labels, hp["num_classes"])
    
    # Set static shapes for TensorFlow
    patches.set_shape(hp["flat_patches_shape"])
    labels.set_shape(hp["num_classes"])
    
    return patches, labels

def tf_dataset(images, batch=32):
    """Create a TensorFlow dataset from file paths."""
    ds = tf.data.Dataset.from_tensor_slices(images)
    ds = ds.map(parse, num_parallel_calls=tf.data.AUTOTUNE)
    ds = ds.batch(batch).prefetch(tf.data.AUTOTUNE)
    return ds

if __name__ == "__main__":
    # Seeding for reproducibility
    np.random.seed(42)
    tf.random.set_seed(42)
    
    # Create directory to store model and logs
    create_dir("files")
    
    # Define dataset paths
    dataset_path = "/kaggle/input/malnet-dataset/0000"
    model_path = os.path.join("files", "model.keras")
    csv_path = os.path.join("files", "log.csv")
    
    # Load dataset and split into training, validation, and test sets
    train_x, valid_x, test_x = load_data(dataset_path, val_split=0.2, test_split=0.1)
    
    train_ds = tf_dataset(train_x, batch=hp["batch_size"])
    valid_ds = tf_dataset(valid_x, batch=hp["batch_size"])
    
    # Initialize and compile the Vision Transformer model
    model = ViT(hp)
    model.compile(
        loss="categorical_crossentropy",
        optimizer=tf.keras.optimizers.Adam(hp["lr"], clipvalue=1.0),
        metrics=["acc"]
    )
    
    # Define callbacks for model training
    callbacks = [
        ModelCheckpoint(model_path, monitor='val_loss', verbose=1, save_best_only=True),
        ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=10, min_lr=1e-6, verbose=1),
        CSVLogger(csv_path),
        EarlyStopping(monitor='val_loss', patience=20, restore_best_weights=True),
    ]
    
    # Train the model
    model.fit(
        train_ds,
        epochs=hp["num_epochs"],
        validation_data=valid_ds,
        callbacks=callbacks
    )
